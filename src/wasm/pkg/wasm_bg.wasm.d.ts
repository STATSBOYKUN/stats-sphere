/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_smoothing_free: (a: number, b: number) => void;
export const smoothing_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
export const smoothing_get_data_header: (a: number) => [number, number];
export const smoothing_get_data: (a: number) => [number, number];
export const smoothing_get_time: (a: number) => [number, number];
export const smoothing_get_time_header: (a: number) => [number, number];
export const smoothing_set_data_header: (a: number, b: number, c: number) => void;
export const smoothing_set_data: (a: number, b: number, c: number) => void;
export const smoothing_set_time: (a: number, b: number, c: number) => void;
export const smoothing_set_time_header: (a: number, b: number, c: number) => void;
export const __wbg_decomposition_free: (a: number, b: number) => void;
export const decomposition_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
export const decomposition_get_data: (a: number) => [number, number];
export const decomposition_get_data_header: (a: number) => [number, number];
export const decomposition_get_time: (a: number) => [number, number];
export const decomposition_get_time_header: (a: number) => [number, number];
export const decomposition_get_seasonal_component: (a: number) => [number, number];
export const decomposition_get_trend_component: (a: number) => [number, number];
export const decomposition_get_irregular_component: (a: number) => [number, number];
export const decomposition_get_seasonal_indices: (a: number) => [number, number];
export const decomposition_get_period: (a: number) => number;
export const decomposition_get_trend_equation: (a: number) => [number, number];
export const decomposition_set_seasonal_component: (a: number, b: number, c: number) => void;
export const decomposition_set_trend_component: (a: number, b: number, c: number) => void;
export const decomposition_set_irregular_component: (a: number, b: number, c: number) => void;
export const decomposition_set_seasonal_indices: (a: number, b: number, c: number) => void;
export const decomposition_set_trend_equation: (a: number, b: number, c: number) => void;
export const preprocess_data: (a: any, b: number, c: number, d: number) => [number, number, number];
export const handle_missing_values: (a: any, b: number, c: number) => [number, number, number];
export const impute_missing_values: (a: any, b: number, c: number) => [number, number, number];
export const smoothing_calculate_sma: (a: number, b: number) => [number, number];
export const smoothing_calculate_dma: (a: number, b: number) => [number, number];
export const smoothing_calculate_wma: (a: number, b: number) => [number, number];
export const decomposition_calculate_centered_moving_average: (a: number) => [number, number];
export const __wbg_discriminantanalysiswasm_free: (a: number, b: number) => void;
export const discriminantanalysiswasm_new: (a: any, b: any, c: number, d: number, e: any) => [number, number, number];
export const discriminantanalysiswasm_compute_canonical_discriminant_functions: (a: number) => [number, number];
export const discriminantanalysiswasm_univariate_f_lambda: (a: number, b: number) => [number, number, number];
export const discriminantanalysiswasm_box_m_test: (a: number) => [number, number, number];
export const discriminantanalysiswasm_wilks_lambda: (a: number) => any;
export const discriminantanalysiswasm_classify: (a: number, b: any) => [number, number, number];
export const discriminantanalysiswasm_cross_validate: (a: number) => [number, number, number];
export const discriminantanalysiswasm_group_centroids: (a: number) => any;
export const discriminantanalysiswasm_standardized_coefficients: (a: number) => [number, number, number];
export const discriminantanalysiswasm_structure_matrix: (a: number) => [number, number, number];
export const discriminantanalysiswasm_canonical_correlations: (a: number) => any;
export const discriminantanalysiswasm_classification_functions: (a: number) => [number, number, number];
export const discriminantanalysiswasm_get_results: (a: number) => [number, number, number];
export const discriminantanalysiswasm_perform_stepwise_analysis: (a: number) => [number, number, number];
export const discriminantanalysiswasm_get_model_summary: (a: number) => [number, number];
export const perform_analysis: (a: any, b: any) => [number, number, number];
export const start: () => void;
export const smoothing_smoothing_evaluation: (a: number, b: number, c: number) => any;
export const parse_clustering_config: (a: any) => [number, number, number];
export const __wbg_hierarchicalclusteringwasm_free: (a: number, b: number) => void;
export const hierarchicalclusteringwasm_new: (a: any, b: any, c: any, d: any, e: any) => [number, number, number];
export const hierarchicalclusteringwasm_perform_analysis: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_preprocess_data: (a: number) => [number, number];
export const hierarchicalclusteringwasm_calculate_distances: (a: number) => [number, number];
export const hierarchicalclusteringwasm_cluster: (a: number) => [number, number];
export const hierarchicalclusteringwasm_get_clusters: (a: number, b: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_clusters_range: (a: number, b: number, c: number) => [number, number, number];
export const hierarchicalclusteringwasm_evaluate: (a: number, b: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_results: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_dendrogram_data: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_variable_names: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_label_data: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_config: (a: number) => [number, number, number];
export const hierarchicalclusteringwasm_get_warnings: (a: number) => [number, number, number];
export const smoothing_calculate_ses: (a: number, b: number) => [number, number];
export const smoothing_calculate_des: (a: number, b: number) => [number, number];
export const decomposition_additive_decomposition: (a: number) => [number, number];
export const mse: (a: number, b: number, c: number, d: number) => number;
export const rmse: (a: number, b: number, c: number, d: number) => number;
export const mae: (a: number, b: number, c: number, d: number) => number;
export const mpe: (a: number, b: number, c: number, d: number) => number;
export const mape: (a: number, b: number, c: number, d: number) => number;
export const decomposition_decomposition_evaluation: (a: number, b: number, c: number) => any;
export const first_difference: (a: number, b: number) => [number, number];
export const second_difference: (a: number, b: number) => [number, number];
export const seasonal_difference: (a: number, b: number, c: number) => [number, number];
export const smoothing_calculate_holt: (a: number, b: number, c: number) => [number, number];
export const smoothing_calculate_winter: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const __wbg_kmeansclusteringwasm_free: (a: number, b: number) => void;
export const kmeansclusteringwasm_new: (a: any, b: any, c: any, d: any, e: any) => [number, number, number];
export const kmeansclusteringwasm_perform_analysis: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_initial_centers: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_final_centers: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_iterations: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_cluster_membership: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_distances: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_cluster_sizes: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_anova_table: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_variable_names: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_iteration_count: (a: number) => number;
export const kmeansclusteringwasm_get_missing_count: (a: number) => number;
export const kmeansclusteringwasm_get_warnings: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_results: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_case_statistics: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_case_counts_table: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_cluster_membership_table: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_anova_table_formatted: (a: number) => [number, number, number];
export const kmeansclusteringwasm_get_distance_matrix_table: (a: number) => [number, number, number];
export const decomposition_multiplicative_decomposition: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_multiplicative_seasonal_component: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_multiplicative_trend_component: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const decomposition_linear_trend: (a: number, b: number, c: number) => [number, number];
export const decomposition_exponential_trend: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_additive_trend_component: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_additive_seasonal_component: (a: number, b: number, c: number) => [number, number];
export const __wbg_autocorrelation_free: (a: number, b: number) => void;
export const autocorrelation_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const autocorrelation_get_data: (a: number) => [number, number];
export const autocorrelation_get_data_header: (a: number) => [number, number];
export const autocorrelation_get_lag: (a: number) => number;
export const autocorrelation_get_acf: (a: number) => [number, number];
export const autocorrelation_get_acf_se: (a: number) => [number, number];
export const autocorrelation_get_pacf: (a: number) => [number, number];
export const autocorrelation_get_pacf_se: (a: number) => [number, number];
export const autocorrelation_get_lb: (a: number) => [number, number];
export const autocorrelation_get_df_lb: (a: number) => [number, number];
export const autocorrelation_get_pvalue_lb: (a: number) => [number, number];
export const autocorrelation_set_data: (a: number, b: number, c: number) => void;
export const autocorrelation_set_data_header: (a: number, b: number, c: number) => void;
export const autocorrelation_set_lag: (a: number, b: number) => void;
export const autocorrelation_set_acf: (a: number, b: number, c: number) => void;
export const autocorrelation_set_acf_se: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pacf: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pacf_se: (a: number, b: number, c: number) => void;
export const autocorrelation_set_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_set_df_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pvalue_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_calculate_acf: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_acf_se: (a: number, b: number, c: number) => [number, number];
export const partial_kj: (a: number, b: number, c: number, d: number) => number;
export const autocorrelation_calculate_pacf: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_pacf_se: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_ljung_box: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_pvalue_ljung_box: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_df_ljung_box: (a: number) => [number, number];
export const autocorrelation_autocorelate: (a: number, b: number, c: number, d: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_4: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
