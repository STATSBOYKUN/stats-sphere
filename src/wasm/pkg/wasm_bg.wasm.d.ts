/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const get_gamma_0_tab1: () => [number, number];
export const __wbg_smoothing_free: (a: number, b: number) => void;
export const smoothing_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
export const smoothing_get_data_header: (a: number) => [number, number];
export const smoothing_get_data: (a: number) => [number, number];
export const smoothing_get_time: (a: number) => [number, number];
export const smoothing_get_time_header: (a: number) => [number, number];
export const smoothing_set_data_header: (a: number, b: number, c: number) => void;
export const smoothing_set_data: (a: number, b: number, c: number) => void;
export const smoothing_set_time: (a: number, b: number, c: number) => void;
export const smoothing_set_time_header: (a: number, b: number, c: number) => void;
export const smoothing_calculate_sma: (a: number, b: number) => [number, number];
export const smoothing_calculate_dma: (a: number, b: number) => [number, number];
export const smoothing_calculate_wma: (a: number, b: number) => [number, number];
export const smoothing_calculate_ses: (a: number, b: number) => [number, number];
export const smoothing_calculate_des: (a: number, b: number) => [number, number];
export const smoothing_calculate_holt: (a: number, b: number, c: number) => [number, number];
export const smoothing_calculate_winter: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const smoothing_smoothing_evaluation: (a: number, b: number, c: number) => any;
export const __wbg_augmenteddickeyfuller_free: (a: number, b: number) => void;
export const augmenteddickeyfuller_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const augmenteddickeyfuller_get_data: (a: number) => [number, number];
export const augmenteddickeyfuller_get_lag: (a: number) => number;
export const augmenteddickeyfuller_get_equation: (a: number) => [number, number];
export const augmenteddickeyfuller_get_level: (a: number) => [number, number];
export const augmenteddickeyfuller_get_b: (a: number) => number;
export const augmenteddickeyfuller_get_se: (a: number) => number;
export const augmenteddickeyfuller_get_test_stat: (a: number) => number;
export const augmenteddickeyfuller_set_data: (a: number, b: number, c: number) => void;
export const augmenteddickeyfuller_set_equation: (a: number, b: number, c: number) => void;
export const augmenteddickeyfuller_set_level: (a: number, b: number, c: number) => void;
export const augmenteddickeyfuller_set_b: (a: number, b: number) => void;
export const augmenteddickeyfuller_set_se: (a: number, b: number) => void;
export const augmenteddickeyfuller_set_test_stat: (a: number, b: number) => void;
export const augmenteddickeyfuller_calculate_pvalue: (a: number) => number;
export const augmenteddickeyfuller_calculate_critical_value: (a: number) => [number, number];
export const augmenteddickeyfuller_calculate_test_stat: (a: number) => number;
export const get_beta_inf: () => [number, number];
export const __wbg_decomposition_free: (a: number, b: number) => void;
export const decomposition_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
export const decomposition_get_data: (a: number) => [number, number];
export const decomposition_get_data_header: (a: number) => [number, number];
export const decomposition_get_time: (a: number) => [number, number];
export const decomposition_get_time_header: (a: number) => [number, number];
export const decomposition_get_seasonal_component: (a: number) => [number, number];
export const decomposition_get_trend_component: (a: number) => [number, number];
export const decomposition_get_irregular_component: (a: number) => [number, number];
export const decomposition_get_seasonal_indices: (a: number) => [number, number];
export const decomposition_get_period: (a: number) => number;
export const decomposition_get_trend_equation: (a: number) => [number, number];
export const decomposition_set_seasonal_component: (a: number, b: number, c: number) => void;
export const decomposition_set_trend_component: (a: number, b: number, c: number) => void;
export const decomposition_set_irregular_component: (a: number, b: number, c: number) => void;
export const decomposition_set_seasonal_indices: (a: number, b: number, c: number) => void;
export const decomposition_set_trend_equation: (a: number, b: number, c: number) => void;
export const decomposition_calculate_centered_moving_average: (a: number) => [number, number];
export const decomposition_multiplicative_decomposition: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_multiplicative_seasonal_component: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_multiplicative_trend_component: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const decomposition_linear_trend: (a: number, b: number, c: number) => [number, number];
export const decomposition_quadratic_trend: (a: number, b: number, c: number) => [number, number];
export const decomposition_exponential_trend: (a: number, b: number, c: number) => [number, number];
export const decomposition_additive_decomposition: (a: number) => [number, number];
export const decomposition_calculate_additive_seasonal_component: (a: number, b: number, c: number) => [number, number];
export const decomposition_calculate_additive_trend_component: (a: number, b: number, c: number) => [number, number];
export const decomposition_decomposition_evaluation: (a: number, b: number, c: number) => any;
export const multiplelinearregression_calculate_regression: (a: number) => void;
export const multiplelinearregression_calculate_standard_error: (a: number) => [number, number];
export const __wbg_autocorrelation_free: (a: number, b: number) => void;
export const autocorrelation_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const autocorrelation_get_data: (a: number) => [number, number];
export const autocorrelation_get_data_header: (a: number) => [number, number];
export const autocorrelation_get_lag: (a: number) => number;
export const autocorrelation_get_acf: (a: number) => [number, number];
export const autocorrelation_get_acf_se: (a: number) => [number, number];
export const autocorrelation_get_pacf: (a: number) => [number, number];
export const autocorrelation_get_pacf_se: (a: number) => [number, number];
export const autocorrelation_get_lb: (a: number) => [number, number];
export const autocorrelation_get_df_lb: (a: number) => [number, number];
export const autocorrelation_get_pvalue_lb: (a: number) => [number, number];
export const autocorrelation_set_data: (a: number, b: number, c: number) => void;
export const autocorrelation_set_data_header: (a: number, b: number, c: number) => void;
export const autocorrelation_set_lag: (a: number, b: number) => void;
export const autocorrelation_set_acf: (a: number, b: number, c: number) => void;
export const autocorrelation_set_acf_se: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pacf: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pacf_se: (a: number, b: number, c: number) => void;
export const autocorrelation_set_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_set_df_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_set_pvalue_lb: (a: number, b: number, c: number) => void;
export const autocorrelation_calculate_acf: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_acf_se: (a: number, b: number, c: number) => [number, number];
export const partial_kj: (a: number, b: number, c: number, d: number) => number;
export const autocorrelation_calculate_pacf: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_pacf_se: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_calculate_ljung_box: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_pvalue_ljung_box: (a: number, b: number, c: number) => [number, number];
export const autocorrelation_df_ljung_box: (a: number) => [number, number];
export const autocorrelation_autocorelate: (a: number, b: number, c: number, d: number) => void;
export const __wbg_simplelinearregression_free: (a: number, b: number) => void;
export const simplelinearregression_new: (a: number, b: number, c: number, d: number) => number;
export const simplelinearregression_get_x: (a: number) => [number, number];
export const simplelinearregression_get_y: (a: number) => [number, number];
export const simplelinearregression_get_y_prediction: (a: number) => [number, number];
export const simplelinearregression_get_b1: (a: number) => number;
export const simplelinearregression_set_y_prediction: (a: number, b: number, c: number) => void;
export const simplelinearregression_set_b1: (a: number, b: number) => void;
export const simplelinearregression_calculate_regression: (a: number) => void;
export const simplelinearregression_calculate_standard_error: (a: number) => number;
export const __wbg_nointerceptlinearregression_free: (a: number, b: number) => void;
export const nointerceptlinearregression_new: (a: number, b: number, c: number, d: number) => number;
export const nointerceptlinearregression_get_x: (a: number) => [number, number];
export const nointerceptlinearregression_get_y: (a: number) => [number, number];
export const nointerceptlinearregression_get_y_prediction: (a: number) => [number, number];
export const nointerceptlinearregression_get_b: (a: number) => number;
export const nointerceptlinearregression_set_y_prediction: (a: number, b: number, c: number) => void;
export const nointerceptlinearregression_set_b: (a: number, b: number) => void;
export const nointerceptlinearregression_calculate_regression: (a: number) => void;
export const nointerceptlinearregression_calculate_standard_error: (a: number) => number;
export const __wbg_multiplelinearregression_free: (a: number, b: number) => void;
export const multiplelinearregression_new: (a: any, b: number, c: number) => number;
export const multiplelinearregression_get_x: (a: number) => any;
export const multiplelinearregression_get_y: (a: number) => [number, number];
export const multiplelinearregression_get_y_prediction: (a: number) => [number, number];
export const multiplelinearregression_get_beta: (a: number) => [number, number];
export const multiplelinearregression_set_y_prediction: (a: number, b: number, c: number) => void;
export const multiplelinearregression_set_beta: (a: number, b: number, c: number) => void;
export const simplelinearregression_get_b0: (a: number) => number;
export const simplelinearregression_set_b0: (a: number, b: number) => void;
export const __wbg_quadraticregression_free: (a: number, b: number) => void;
export const quadraticregression_new: (a: number, b: number, c: number, d: number) => number;
export const quadraticregression_get_x: (a: number) => [number, number];
export const quadraticregression_get_y: (a: number) => [number, number];
export const quadraticregression_get_y_prediction: (a: number) => [number, number];
export const quadraticregression_get_beta: (a: number) => [number, number];
export const quadraticregression_set_y_prediction: (a: number, b: number, c: number) => void;
export const quadraticregression_set_beta: (a: number, b: number, c: number) => void;
export const quadraticregression_calculate_regression: (a: number) => void;
export const __wbg_dickeyfuller_free: (a: number, b: number) => void;
export const dickeyfuller_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const dickeyfuller_get_data: (a: number) => [number, number];
export const dickeyfuller_get_equation: (a: number) => [number, number];
export const dickeyfuller_get_level: (a: number) => [number, number];
export const dickeyfuller_get_b: (a: number) => number;
export const dickeyfuller_get_se: (a: number) => number;
export const dickeyfuller_get_test_stat: (a: number) => number;
export const dickeyfuller_set_data: (a: number, b: number, c: number) => void;
export const dickeyfuller_set_equation: (a: number, b: number, c: number) => void;
export const dickeyfuller_set_level: (a: number, b: number, c: number) => void;
export const dickeyfuller_set_b: (a: number, b: number) => void;
export const dickeyfuller_set_se: (a: number, b: number) => void;
export const dickeyfuller_set_test_stat: (a: number, b: number) => void;
export const dickeyfuller_calculate_pvalue: (a: number) => number;
export const dickeyfuller_calculate_critical_value: (a: number) => [number, number];
export const dickeyfuller_calculate_test_stat: (a: number) => number;
export const __wbg_simpleexponentialregression_free: (a: number, b: number) => void;
export const simpleexponentialregression_new: (a: number, b: number, c: number, d: number) => number;
export const simpleexponentialregression_get_x: (a: number) => [number, number];
export const simpleexponentialregression_get_y: (a: number) => [number, number];
export const simpleexponentialregression_get_y_prediction: (a: number) => [number, number];
export const simpleexponentialregression_set_y_prediction: (a: number, b: number, c: number) => void;
export const simpleexponentialregression_calculate_regression: (a: number) => void;
export const simpleexponentialregression_get_b0: (a: number) => number;
export const simpleexponentialregression_get_b1: (a: number) => number;
export const simpleexponentialregression_set_b0: (a: number, b: number) => void;
export const simpleexponentialregression_set_b1: (a: number, b: number) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __wbindgen_start: () => void;
